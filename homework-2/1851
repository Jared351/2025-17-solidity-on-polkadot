// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IERC20.sol";

contract MyERC20 is IERC20{
    string private _name;
    string private _symbol;
    uint8 public _decimals;
    uint256 private _totalSupply;
   mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    address private _owner;
    
   // constructor(string memory name_,string memory symbol_,uint8 decimals_,uint256 initialSupply_){
   //      _name=name_;
    //     _symbol=symbol_;
    //     _decimals=decimals_;
   //      _owner=msg.sender;
   //      _totalSupply=initialSupply_ * 10 ** uint256(decimals_);
   //      _balances[msg.sender] = _totalSupply;
   //      emit Transfer(address(0),msg.sender,_totalSupply);
   // }
    constructor(string memory name_,string memory symbol_,address owner_,uint8 decimals_,uint256 initialSupply_){
         _name=name_;
         _symbol=symbol_;
         _decimals=decimals_;
         _owner=owner_;
         _totalSupply=initialSupply_ * 10 ** uint256(decimals_);
         _balances[owner_] = _totalSupply;
         emit Transfer(address(0),owner_,_totalSupply);
    }
   
    modifier onlyOwner(){
        require(msg.sender == _owner,"MyERC20 : caller is not the owner");
        _;
    }
     
    function name() external view override returns (string memory){
        return _name;
    }
   
    function symbol() external view override returns (string memory){
        return _symbol;
    }
   
    function decimals() external view override returns (uint8){
        return _decimals;
    }
 
    function totalSupply() public view returns (uint256){
        return _totalSupply;
    }
    
    function balanceOf(address account) external view override returns (uint256){
        return _balances[account];
    }
    
    function transfer(address to,uint256 amount) external override returns (bool){
       require (to != address(0),"MyERC20: transfer from the zero address"); //从0地址转出
       require (_balances[msg.sender] >= amount,"MyERC20: the transfer amount exceeds balance");//转出金额超过余额
        _balances[msg.sender] -= amount;
        _balances[to] += amount;
    emit Transfer(msg.sender,to,amount);
        return true;
    }
    
      function allowance(address owner,address spender) external view override returns (uint256){
         return _allowances[owner][spender];
      }

     function transferFrom(address from, address to, uint256 amount) external override returns (bool) {
        require(from != address(0),"MyERC20: transfer from the zero address");
        require(to != address(0),"MyERC20: transfer to the zero address");
        require(_balances[from] >=amount,"MyERC20: transfer amount exceeds balance");
        require(_allowances[from][msg.sender] >= amount, "MyERC20: transfer amount exceeds allowance"); 
   
        _balances[from] -= amount;
     
        _balances[to] += amount;
     
        _allowances[from][msg.sender] -=amount;
  
        emit Transfer(from,to,amount);
        return true;
     }

 function approve(address spender, uint256 amount) external override returns (bool) {
        require(spender != address(0), "MyERC20:  approve to the zero address");
  
        _allowances[msg.sender][spender] = amount;
 
        emit Approval(msg.sender, spender, amount);
        return true;
    }

     function mint(address to, uint256 amount) external onlyOwner returns (bool) {
        require(to != address(0), "MyERC20: mint to the zero address");
        require(amount > 0, "MyERC20: mint amount must be greater than zero");

        _totalSupply += amount;
        _balances[to] += amount;
        emit Transfer(address(0), to, amount);
        return true;
    }

    function burn(uint256 amount) external returns (bool) {
        require(amount > 0, "MyERC20: burn amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "MyERC20: burn amount exceeds balance"); 

        _totalSupply -= amount;
        _balances[msg.sender] -= amount;
        emit Transfer(msg.sender, address(0), amount);
        return true;
    }

}
